<template>
  <div class="app-container">
    <div class="filter-container">
      <el-form>
 
        <el-form-item>
          <el-input v-model="listQuery.module" placeholder="请输入model" style='width: 300px;' type="text" clearable></el-input>
          <el-input v-model="listQuery.valuesDesc" placeholder="请输入资源描述" style='width: 300px;' type="text" clearable></el-input>
          <el-button type="primary" prefix-icon="el-icon-search" @click="getList">查询</el-button>
          <el-button type="primary" icon="plus" v-if="hasPerm('scriptConfig:add')" @click="showCreate">添加 </el-button>
        </el-form-item> 
      </el-form>
    </div>
    
    <el-table :data="list" v-loading.body="listLoading" element-loading-text="拼命加载中" border fit
              highlight-current-row height="530">
      <el-table-column align="center" label="序号" width="45" fixed="left">
        <template slot-scope="scope">
          <span v-text="getIndex(scope.$index)"> </span>
        </template>
      </el-table-column>        
      <el-table-column align="center"   label="服务器信息" width="215">
          <template slot-scope="scope">
            <dt>服务器地址: {{ scope.row.ip }}</dt>
            <dt>实例名:     {{ scope.row.serviceName }}</dt> 
            <dt>服务器类型: {{ scope.row.type }}</dt>
            <dt>机房地址:   {{ scope.row.location }}</dt>
          </template>
      </el-table-column>
      <el-table-column align="center" label="采集时间" width="115">
        <template slot-scope="scope">
            <dt>{{ scope.row.execTimeDay }}</dt>
            <dt>{{ scope.row.execTimeHour }}</dt> 
          </template>
      </el-table-column>
      <el-table-column align="center" label="命令描述"    prop="shellDesc" width="190"></el-table-column>
      <el-table-column align="center" label="告警信息"    prop="execResult" width="500"></el-table-column>
      <el-table-column align="center" label="告警状态"    prop="resultStatus" width="90"></el-table-column>
      <el-table-column align="center" label="累计次数"    prop="num" width="90"></el-table-column>
      <el-table-column align="center" width="105" v-if="hasPerm('scriptConfig:update')" label="处理状态" >
        <template slot-scope="scope">
          <el-button v-if="scope.row.handle_status=='0'"  type="danger" prefix-icon="el-icon-search"  @click="showUpdate(scope.$index)"> {{ scope.row.handleStatus }} </el-button>
          <el-button v-else   type="success" prefix-icon="el-icon-search"  @click="showUpdate(scope.$index)"> {{ scope.row.handleStatus }} </el-button>
        </template>
      </el-table-column>
    </el-table>
   
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="listQuery.pageNum"
      :page-size="listQuery.pageRow"
      :total="totalCount"
      :page-sizes="[10, 20, 50, 100]"
      layout="total, sizes, prev, pager, next, jumper">
    </el-pagination>
  </div>
 

</template>
<script>
  import {mapGetters} from 'vuex'
  export default {
    data() {
      return {
        totalCount: 0, //分页组件--数据总条数
        list: [],//表格的数据
        listLoading: false,//数据加载等待动画
        listQuery: {
          pageNum: 1,//页码
          pageRow: 50,//每页条数
        },
        dialogStatus: 'create',
        dialogFormVisible: false,
        tempScriptConfig: {
          ip            : '',  
          serviceName   : '',
          type          : '',  
          num           : '',
          location      : '',
          execTime      : '',
          execTimeDay   : '',
          execTimeHour  : '',
          shellDesc     : '',
          execResult    : '',
          resultStatus  : '',
          handleStatus  : '',
          handle_status : '',
        },
        
      }
    
    },
    created() {
      this.getList();
    },
    computed: {
      ...mapGetters([
        'userId'
      ])
    },
    methods: {
      getList() {
        //查询列表
        this.listLoading = true;
        this.api({
          
          url: "/alarmConfig/listAlarmConfig",
          method: "get",
          params: this.listQuery
        }).then(data => {
          this.listLoading = false;
          this.list = data.list;
          this.totalCount = data.totalCount;
        })
      },
      handleSizeChange(val) {
        //改变每页数量
        this.listQuery.pageRow = val
        this.handleFilter();
      },
      handleCurrentChange(val) {
        //改变页码
        this.listQuery.pageNum = val
        this.getList();
      },
      handleFilter() {
        //查询事件
        this.listQuery.pageNum = 1
        this.getList()
      },
      getIndex($index) {
        //表格序号
        return (this.listQuery.pageNum - 1) * this.listQuery.pageRow + $index + 1
      },
      showUpdate($index) {
        let shell                          = this.list[$index];
        this.tempScriptConfig.module       =  shell.module;  
        this.tempScriptConfig.code         =  shell.code;
        this.tempScriptConfig.values       =  shell.values; 
        this.tempScriptConfig.valuesDesc   =  shell.valuesDesc; 
        this.tempScriptConfig.id           = shell.id;
        this.dialogStatus                  = "update"
        this.dialogFormVisible             = true
      },
      updateScript() {
        debugger
        //修改用户信息
        let _vue = this;
        this.api({
          url: "/resourcesConfig/updateResources",
          method: "post",
          data: this.tempScriptConfig
        }).then(() => {
          let msg = "修改成功";
          this.dialogFormVisible = false
          if (this.userId === this.tempScriptConfig.userId) {
            msg = '修改成功,部分信息重新登录后生效'
          }
          this.$message({
            message: msg,
            type: 'success',
            duration: 1 * 1000,
            onClose: () => {
              _vue.getList();
            }
          })
        })
      },

    }
  }
</script>
<style>
 dt {text-align:left;  margin-left:5px;}
</style>